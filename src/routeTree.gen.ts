/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as VideoRouteImport } from './routes/video'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FriendsRouteImport } from './routes/friends'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ChatIndexRouteImport } from './routes/chat/index'
import { Route as ChatChatIdRouteImport } from './routes/chat/$chatId'
import { ServerRoute as ApiTagsServerRouteImport } from './routes/api.tags'

const rootServerRouteImport = createServerRootRoute()

const VideoRoute = VideoRouteImport.update({
  id: '/video',
  path: '/video',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FriendsRoute = FriendsRouteImport.update({
  id: '/friends',
  path: '/friends',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatIndexRoute = ChatIndexRouteImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatChatIdRoute = ChatChatIdRouteImport.update({
  id: '/chat/$chatId',
  path: '/chat/$chatId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTagsServerRoute = ApiTagsServerRouteImport.update({
  id: '/api/tags',
  path: '/api/tags',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/friends': typeof FriendsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/signup': typeof SignupRoute
  '/video': typeof VideoRoute
  '/chat/$chatId': typeof ChatChatIdRoute
  '/chat': typeof ChatIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/friends': typeof FriendsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/signup': typeof SignupRoute
  '/video': typeof VideoRoute
  '/chat/$chatId': typeof ChatChatIdRoute
  '/chat': typeof ChatIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/friends': typeof FriendsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/signup': typeof SignupRoute
  '/video': typeof VideoRoute
  '/chat/$chatId': typeof ChatChatIdRoute
  '/chat/': typeof ChatIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/friends'
    | '/login'
    | '/profile'
    | '/signup'
    | '/video'
    | '/chat/$chatId'
    | '/chat'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/friends'
    | '/login'
    | '/profile'
    | '/signup'
    | '/video'
    | '/chat/$chatId'
    | '/chat'
  id:
    | '__root__'
    | '/'
    | '/friends'
    | '/login'
    | '/profile'
    | '/signup'
    | '/video'
    | '/chat/$chatId'
    | '/chat/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FriendsRoute: typeof FriendsRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  SignupRoute: typeof SignupRoute
  VideoRoute: typeof VideoRoute
  ChatChatIdRoute: typeof ChatChatIdRoute
  ChatIndexRoute: typeof ChatIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/tags': typeof ApiTagsServerRoute
}
export interface FileServerRoutesByTo {
  '/api/tags': typeof ApiTagsServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/tags': typeof ApiTagsServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/tags'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/tags'
  id: '__root__' | '/api/tags'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTagsServerRoute: typeof ApiTagsServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/video': {
      id: '/video'
      path: '/video'
      fullPath: '/video'
      preLoaderRoute: typeof VideoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/friends': {
      id: '/friends'
      path: '/friends'
      fullPath: '/friends'
      preLoaderRoute: typeof FriendsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/$chatId': {
      id: '/chat/$chatId'
      path: '/chat/$chatId'
      fullPath: '/chat/$chatId'
      preLoaderRoute: typeof ChatChatIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/tags': {
      id: '/api/tags'
      path: '/api/tags'
      fullPath: '/api/tags'
      preLoaderRoute: typeof ApiTagsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FriendsRoute: FriendsRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  SignupRoute: SignupRoute,
  VideoRoute: VideoRoute,
  ChatChatIdRoute: ChatChatIdRoute,
  ChatIndexRoute: ChatIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTagsServerRoute: ApiTagsServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
